{
    "collab_server" : "",
    "contents" : "#' Extract features\n#'\n#' Extract relevant features from a glmnet cox fit object.\n#'\n#' @param mod Coxph model object fitted with coxph (survival).\n#' @return Features\n#' @seealso [glmnet]\n#' @keywords glmnet\n#' @author Carlos S Traynor\n#' @references\n#'\n#'  Noah Simon, Jerome Friedman, Trevor Hastie, Rob Tibshirani (2011).\n#'   Regularization Paths for Cox's Proportional Hazards Model via\n#'  Coordinate Descent. Journal of Statistical Software, 39(5), 1-13.\n#'  URL  http://www.jstatsoft.org/v39/i05/.\n#' @export extract_features\n\nextract_features <- function(mod){\n  # find optimised lambda\n  optimal.coef <- as.matrix(glmnet::coef.cv.glmnet(mod, s = \"lambda.min\"))\n  optimal.coef <- as.data.frame(optimal.coef)\n  colnames(optimal.coef) <- \"coef\"\n  optimal.coef <- tibble::rownames_to_column(optimal.coef, var = \"feature\")\n  optimal.coef <-  optimal.coef[optimal.coef$coef != 0,]\n  return(optimal.coef)\n}\n\n#' Function par table\n#'\n#' Extract features of a classical fit model\n#' @param\n#' obj : survival coxph fit. \\cr\n#' @return a coxph fit object\n#' @export\n#' @importFrom magrittr %>%\n#' @importFrom rlang !!\n#' @import prodlim\n#' @import survival\n#' @author Sahota Tarj - caret\n\npar.table <- function(fit){ ## needs glm object\n  d1 <- summary(fit)$coefficients\n  d1 <- as.data.frame(d1)\n  dc <- as.data.frame(matrix(confint(fit),ncol=2))\n  names(dc) <- c(\"lower\",\"upper\")\n  d1 <- cbind(data.frame(Parameter=row.names(d1)),d1,dc)\n  rownames(d1) <- NULL\n  d1$description <- NA\n\n  d1 <- d1 %>%\n    dplyr::rename(Estimate = coef,\n                  \"se_Estimate\" = \"se(coef)\",\n                  HR = \"exp(coef)\"\n    ) %>%\n    dplyr::mutate(se = exp(se_Estimate),\n                  lower = exp(lower),\n                  upper = exp(upper)) %>%\n    dplyr::select(Parameter, Estimate, HR, se_Estimate, se, dplyr::everything()) %>%\n    dplyr::select(-Estimate,-se_Estimate)\n\n  d1$description <-\"Hazard ratio (relative SE)\"\n\n  return(d1)\n}\n\n\n\n#' Map gene_entrez_id\n#'\n#' Mapping the genes\n#' @param Hugo_Symbol \\cr\n#' @return gene_entrez_id\n#' @export mg\n\nmg <- function(x){\n  gene_names$Entrez_Gene_Id[match(x, gene_names$Hugo_Symbol)]\n}\n\n#' Round data frame\n#'\n#' Round data frame\n#' @param decimals \\cr\n#' @return rounded\n#' @export my_round\nmy_round <- function(x){\n  if(is.character(x)){\n    x\n  }else{\n    round(x,3)\n  }\n}\n\n#' Change - string\n#'\n#' Change - string\n#' @param string \\cr\n#' @return replacement\n#' @export my_replace\nmy_replace <- function(x){\n\n  x <- gsub(\"1-Sep\", \"Sep_1\", x)\n  x <- gsub(\"\\\\-\", \"_\", x)\n  gsub(\"`\", \"\", x)\n}\n\n\n#' Function posterior table\n#'\n#' Extract features of a Bayesian model\n#' @param\n#' obj : posterior distribution and contrasts \\cr\n#' @return a table for publication\n#' @export post_tab\n\npost_tab <- function(diff_tab, ibrier_tab){\n  ibrier_tab$model <- gsub(\"ibrier_\", \"\",  ibrier_tab$model)\n  ibrier_tab <- ibrier_tab[c(2,1,3),]\n  diff_tab <- rbind(rep(NA_real_,3) , diff_tab)\n  diff_tab$contrast <- NULL\n  cbind(ibrier_tab, diff_tab)\n}\n",
    "created" : 1528111086736.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4027335778",
    "id" : "9E98CFBA",
    "lastKnownWriteTime" : 1527584788,
    "last_content_update" : 1527584788,
    "path" : "C:/RFactory/iclust2prog/R/utils.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}